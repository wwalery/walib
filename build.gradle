plugins {
  id "net.ossindex.audit" version "0.1.1"
  id 'com.github.sherter.google-java-format' version '0.9'
  id 'checkstyle'
}


apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.github.sherter.google-java-format'

ext.javaVersion = JavaVersion.VERSION_11

idea.module.downloadJavadoc = true
java {
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
}



repositories {
    jcenter()
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror" << "-Xlint:all" << "-Xlint:-processing"
}

checkstyle {
  configFile file("checkstyle.xml")
  toolVersion '8.26';
}

tasks.withType(Checkstyle) {
// Specify all files that should be checked
  classpath = files()
  source "${project.rootDir}"

// Define the output folder of the generated reports
  reports {
    html {
      enabled true
      destination rootProject.file("build/reports/checkstyle/checkstyle.html")
    }
    xml {
      enabled true
      destination rootProject.file("build/reports/checkstyle/checkstyle.xml")
    }
  }
}
// Execute Checkstyle on all files
task checkstyle(type: Checkstyle) {
}

task checkstyleChanged(type: Checkstyle) {
    def changedFiles = System.getProperty('changedFiles', '').split(',')
    include changedFiles
}

task checkChanged {
  dependsOn checkstyleChanged
}



dependencies {

// https://mvnrepository.com/artifact/org.projectlombok/lombok
//  compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
//  annotationProcessor "org.projectlombok:lombok:1.18.12"
//  testImplementation group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
//  testAnnotationProcessor "org.projectlombok:lombok:1.18.12"

// https://mvnrepository.com/artifact/com.google.guava/guava
//  implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'

  implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

}

def pomContent = {
  name "${project.group}:${project.name}"
  description project.description
  url = 'https://github.com/wwalery/walib'
  groupId project.group
  artifactId project.name
  version project.version
  inceptionYear '2020'
  packaging 'jar'
  licenses {
    license {
      name 'The Apache Software License, Version 2.0'
      url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
      distribution 'repo'
    }
  }
  developers {
    developer {
      id = 'walery'
      name = 'Walery Wysotsky'
      email = 'dev@wysotsky.info'
    }
  }
  scm {
    connection = 'scm:git:git://github.com:wwalery/walib.git'
    developerConnection = 'scm:git:ssh://github.com:wwalery/walib.git'
    url = 'https://github.com/wwalery/walib/tree/master'
  }
}


task pom {
  doLast {
    pom { project pomContent }.writeTo("pom.xml")
  }
}

jar {
  manifest.attributes.putAll([
    'Implementation-Title': title,
    'Implementation-Version': version,
    'Implementation-Time': new Date().format("yyyy-MM-dd HH:mm:ss"),
    'Built-By': System.getProperty('user.name'),
    'Built-JDK': System.getProperty('java.version')
  ])
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  sign configurations.archives
}


test {
  testLogging {
    events /*"passed", */ "skipped", "failed"
//    events "started", "passed", "skipped", "failed"
    exceptionFormat = 'full'
    showStandardStreams = true
  }
  afterSuite { desc, result ->
    if (!desc.parent) { // will match the outermost suite
      println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
    }
  }
}

uploadArchives {
//  def props = new Properties()
//  props.load(new FileInputStream(rootProject.file("gradle.local.properties")))
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//        authentication(userName: props['ossrhUsername'], password: props['ossrhPassword'])
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//        authentication(userName: props['ossrhUsername'], password: props['ossrhPassword'])
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom { project pomContent }
    }
  }
}

