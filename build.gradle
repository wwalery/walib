plugins {
  id "net.ossindex.audit" version "0.4.11"
  id 'java-library'
  id 'com.diffplug.spotless' version "${spotlessPluginVersion}"
  id 'net.ltgt.errorprone' version "${errorPronePluginVersion}"
  
//  id 'checkstyle'
  id 'maven-publish'
  id 'signing'
  id("io.github.gradle-nexus.publish-plugin") version "2.0.0"
}


ext.javaVersion = JavaVersion.VERSION_11

java {
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
}

repositories {
    mavenCentral()
}

spotless {
  java {
    toggleOffOn('fmt:off', 'fmt:on')
    removeUnusedImports()
    importOrder()
    eclipse().configFile("${rootDir}/formatter.xml")    
  }
}    


//checkstyle {
//  configFile file("checkstyle.xml")
//}

//tasks.withType(Checkstyle) {
//
//  reports {
//    html {
//      enabled true
//      destination rootProject.file("build/reports/checkstyle/checkstyle.html")
//    }
//    xml {
//      enabled true
//      destination rootProject.file("build/reports/checkstyle/checkstyle.xml")
//    }
//  }
//}


dependencies {
  annotationProcessor "org.immutables:value:${immutablesVersion}"
  compileOnly "org.immutables:value:${immutablesVersion}"
  testCompileOnly "org.immutables:value:${immutablesVersion}"
  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
  implementation "org.immutables:value-annotations:${immutablesVersion}"
  
  implementation "org.slf4j:slf4j-api:${slf4jVersion}"
  implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
//  implementation "org.apache.commons:commons-collections4:${commonsCollectionsVersion}"

  errorprone "com.google.errorprone:error_prone_core:${errorProneVersion}"

  testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
  testImplementation "org.assertj:assertj-core:${assertjVersion}"
// https://mvnrepository.com/artifact/org.hsqldb/hsqldb
  testImplementation "org.hsqldb:hsqldb:${hsqldbVersion}"
// https://mvnrepository.com/artifact/org.hsqldb/sqltool
  testImplementation "org.hsqldb:sqltool:${hsqldbVersion}"
  testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
  testImplementation "ch.qos.logback:logback-core:${logbackVersion}"

  testImplementation "org.testcontainers:postgresql:${testcontainersPostgresVersion}"
  testImplementation "org.postgresql:postgresql:42.7.3"

}


compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << '-parameters' << "-Xlint:unchecked" << "-Xlint:deprecation"
  dependsOn 'spotlessApply'
  options.errorprone {
      disableWarningsInGeneratedCode = true
      ignoreUnknownCheckNames = true
      allErrorsAsWarnings = true
      // workaround for: https://github.com/google/error-prone/issues/780
//      errorproneArgs = ['-Xep:ParameterName:OFF',
//                        '-Xep:FallThrough:OFF',
//                        '-Xep:UnusedVariable:OFF',
//                        '-Xep:UnusedMethod:OFF',
//                        '-Xep:FunctionalInterfaceClash:OFF',
//                        '-Xep:AssertionFailureIgnored:OFF',
//                        '-Xlint:unchecked',
//                        '-Xlint:deprecation'
//      ]
    }  
} 

compileTestJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << '-parameters' << "-Xlint:unchecked" << "-Xlint:deprecation"
} 


test {
  useJUnitPlatform()
  testLogging.showStandardStreams = true
  minHeapSize = "512m"
  maxHeapSize = "1024m"

// listen to events in the test execution lifecycle
  beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
  }

// listen to standard out and standard error of the test JVM(s)
//    onOutput { descriptor, event ->
//      logger.lifecycle(descriptor + ": " + event.message)
//    }

  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat = 'full'
    exceptionFormat = 'full'
    showStandardStreams = true
  }
  afterSuite { desc, result ->
    if (!desc.parent) { // will match the outermost suite
      println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
    }
  }
  
}


def pomContent = {
  name "${project.group}:${project.name}"
  description project.description
  url = 'https://github.com/wwalery/walib'
  groupId project.group
  artifactId project.name
  version project.version
  inceptionYear '2023'
  packaging 'jar'
  licenses {
    license {
      name 'The Apache Software License, Version 2.0'
      url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
      distribution 'repo'
    }
  }
  developers {
    developer {
      id = 'walery'
      name = 'Walery Wysotsky'
      email = 'dev@wysotsky.info'
    }
  }
  scm {
    connection = 'scm:git:git://github.com:wwalery/walib.git'
    developerConnection = 'scm:git:ssh://github.com:wwalery/walib.git'
    url = 'https://github.com/wwalery/walib/tree/master'
  }
}


task pom {
  doLast {
    pom { project pomContent }.writeTo("pom.xml")
  }
}

jar {
  manifest.attributes.putAll([
    'Implementation-Title': title,
    'Implementation-Version': version,
    'Implementation-Time': new Date().format("yyyy-MM-dd HH:mm:ss"),
    'Built-By': System.getProperty('user.name'),
    'Built-JDK': System.getProperty('java.version')
  ])
}

task javadocJar(type: Jar) {
  archiveClassifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  sign publishing.publications
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar
        
            pom {
                packaging = "jar"
                name.set("WALib")
                url.set("https://github.com/wwalery/walib")
                description.set("Flexible DTO Java classes generator. Generate classes from database metadata (schema)")
            
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection.set("scm:https://github.com/wwalery/walib.git")
                    developerConnection.set("scm:git@github.com:wwalery/walib.git")
                    url.set("https://github.com/wwalery/walib")
                }
                developers {
                    developer {
                        id = 'wwalery'
                        name = 'Valerii Vysotskyi'
                        email = 'dev@wysotsky.info'
                    }
                }
            }

        }
    }
}


nexusPublishing {
  repositories {
    // see https://central.sonatype.org/publish/publish-portal-ossrh-staging-api/#configuration
    sonatype {
      nexusUrl = uri("https://ossrh-staging-api.central.sonatype.com/service/local/")
      snapshotRepositoryUrl = uri("https://central.sonatype.com/repository/maven-snapshots/")
      username = project.findProperty("ossrhUsername")
      password = project.findProperty("ossrhPassword")
    }
  }

}
